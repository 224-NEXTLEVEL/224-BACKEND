<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="community">


	<select id="selectAll" parameterType="CommunityDTO"
		resultType="CommunityDTO">
		SELECT
		B.BOARD_NUMBER, B.BOARD_CATE,B.BOARD_TITLE,
		B.BOARD_REGIST_DATE, B.BOARD_UPDATE_DATE, B.BOARD_CONTENT,
		M.MEMBER_NUMBER, M.MEMBER_NICKNAME,
		COUNT(DISTINCT C.COMMENT_NUMBER) AS
		COMMENT_COUNT,
		COUNT(DISTINCT R.MEMBER_NUMBER) AS RECOMMEND_COUNT
		FROM
		TBL_BOARD B
		LEFT
		JOIN
		TBL_MEMBER M ON B.MEMBER_NUMBER = M.MEMBER_NUMBER
		LEFT JOIN
		TBL_COMMENT C ON B.BOARD_NUMBER = C.BOARD_NUMBER
		LEFT JOIN
		TBL_RECOMMEND R ON B.BOARD_NUMBER = R.BOARD_NUMBER
		GROUP BY
		B.BOARD_NUMBER,
		B.BOARD_CATE,
		B.BOARD_TITLE,
		B.BOARD_CONTENT,
		B.BOARD_REGIST_DATE,
		B.BOARD_UPDATE_DATE,
		M.MEMBER_NUMBER,
		M.MEMBER_NICKNAME
		ORDER BY
		BOARD_NUMBER DESC
	</select>

	<!-- 페이지네이션을 위한 쿼리 추가 -->
	<select id="selectAllPaged" parameterType="map"
		resultType="CommunityDTO">
		SELECT * FROM (
		SELECT A.*, ROWNUM RN FROM (
		SELECT
		B.BOARD_NUMBER, B.BOARD_CATE, B.BOARD_TITLE,
		B.BOARD_REGIST_DATE,
		B.BOARD_UPDATE_DATE, B.BOARD_CONTENT,
		M.MEMBER_NUMBER,
		M.MEMBER_NICKNAME,
		COUNT(DISTINCT C.COMMENT_NUMBER) AS COMMENT_COUNT,
		COUNT(DISTINCT R.MEMBER_NUMBER) AS RECOMMEND_COUNT
		FROM
		TBL_BOARD B
		LEFT
		JOIN
		TBL_MEMBER M ON B.MEMBER_NUMBER = M.MEMBER_NUMBER
		LEFT JOIN
		TBL_COMMENT C ON B.BOARD_NUMBER = C.BOARD_NUMBER
		LEFT JOIN
		TBL_RECOMMEND R ON B.BOARD_NUMBER = R.BOARD_NUMBER
		GROUP BY
		B.BOARD_NUMBER, B.BOARD_CATE, B.BOARD_TITLE, B.BOARD_CONTENT,
		B.BOARD_REGIST_DATE, B.BOARD_UPDATE_DATE, M.MEMBER_NUMBER,
		M.MEMBER_NICKNAME
		ORDER BY
		B.BOARD_NUMBER DESC
		) A
		WHERE ROWNUM &lt;=
		#{end}
		)
		WHERE RN > #{start}
	</select>

	<select id="selectAllPagedAndFiltered" parameterType="map"
		resultType="CommunityDTO">
        <![CDATA[
        SELECT * FROM (
            SELECT A.*, ROWNUM RN FROM (
                SELECT
                    B.BOARD_NUMBER, B.BOARD_CATE, B.BOARD_TITLE,
                    B.BOARD_REGIST_DATE, B.BOARD_UPDATE_DATE, B.BOARD_CONTENT,
                    M.MEMBER_NUMBER, M.MEMBER_NICKNAME,
                    COUNT(DISTINCT C.COMMENT_NUMBER) AS COMMENT_COUNT,
                    COUNT(DISTINCT R.MEMBER_NUMBER) AS RECOMMEND_COUNT
                FROM
                    TBL_BOARD B
                LEFT JOIN TBL_MEMBER M ON B.MEMBER_NUMBER = M.MEMBER_NUMBER
                LEFT JOIN TBL_COMMENT C ON B.BOARD_NUMBER = C.BOARD_NUMBER
                LEFT JOIN TBL_RECOMMEND R ON B.BOARD_NUMBER = R.BOARD_NUMBER
                WHERE 
                    (#{category} = '전체' OR B.BOARD_CATE = #{category})
                GROUP BY
                    B.BOARD_NUMBER, B.BOARD_CATE, B.BOARD_TITLE, B.BOARD_CONTENT,
                    B.BOARD_REGIST_DATE, B.BOARD_UPDATE_DATE, M.MEMBER_NUMBER,
                    M.MEMBER_NICKNAME
                ORDER BY B.BOARD_NUMBER DESC
            ) A
            WHERE ROWNUM <= #{end}
        )
        WHERE RN > #{start}
        ]]>
	</select>


	<!-- 전체 게시글 수를 가져오는 쿼리 -->
	<select id="getTotalCount" resultType="int">
		SELECT COUNT(*) FROM
		TBL_BOARD
	</select>



	<insert id="insert" parameterType="CommunityDTO">
		insert into tbl_board
		(board_number, board_cate, board_title, board_content, member_number)
		VALUES (seq_board.nextVal, #{boardCate}, #{boardTitle},
		#{boardContent}, #{memberNumber})
	</insert>

	<select id="comudetail" parameterType="CommunityDTO"
		resultType="CommunityDTO">
		SELECT
		B.BOARD_NUMBER, B.BOARD_CATE, B.BOARD_TITLE,
		B.BOARD_REGIST_DATE, B.BOARD_UPDATE_DATE, B.BOARD_CONTENT,
		M.MEMBER_NUMBER, M.MEMBER_NICKNAME,
		(SELECT COUNT(*) FROM TBL_COMMENT C
		WHERE
		C.BOARD_NUMBER = B.BOARD_NUMBER) AS
		COMMENT_COUNT,
		(SELECT
		COUNT(DISTINCT R.MEMBER_NUMBER) FROM TBL_RECOMMEND R WHERE
		R.BOARD_NUMBER = B.BOARD_NUMBER) AS RECOMMEND_COUNT
		FROM
		TBL_BOARD B
		LEFT JOIN
		TBL_MEMBER M ON B.MEMBER_NUMBER = M.MEMBER_NUMBER
		WHERE
		B.BOARD_NUMBER = #{boardNumber}
	</select>



	<update id="update">
		UPDATE TBL_BOARD
		SET BOARD_TITLE = #{boardTitle},
		BOARD_CONTENT = #{boardContent}
		WHERE BOARD_NUMBER = #{boardNumber}
	</update>


	<select id="selectByBoardNumber" resultType="CommunityDTO">
		SELECT
		BOARD_NUMBER,
		BOARD_CATE,
		BOARD_TITLE,
		BOARD_CONTENT,
		BOARD_REGIST_DATE,
		BOARD_UPDATE_DATE,
		MEMBER_NUMBER,
		RECOMMEND_COUNT,
		COMMENT_COUNT,
		MEMBER_NICKNAME
		FROM
		TBL_BOARD
		WHERE
		BOARD_NUMBER = #{boardNumber}
	</select>


	<delete id="deleteByBoardNumber" parameterType="int">
		DELETE FROM
		TBL_BOARD WHERE BOARD_NUMBER = #{boardNumber}
	</delete>

	<delete id="deleteRecommendByBoardNumber" parameterType="int">
		DELETE
		FROM TBL_RECOMMEND WHERE BOARD_NUMBER = #{boardNumber}
	</delete>

	<delete id="deleteCommentsByBoardNumber" parameterType="int">
		DELETE
		FROM TBL_COMMENT WHERE BOARD_NUMBER = #{boardNumber}
	</delete>

	<select id="commentList" parameterType="int"
		resultType="CommentDTO">
		select c.comment_number, c.comment_content,
		c.comment_regist_date,
		c.comment_update_date, c.board_number,
		c.member_number
		from tbl_comment c, tbl_board b
		where b.board_number =
		#{boardNumber}
		order by c.comment_update_date desc
	</select>

	<select id="memberList" resultType="MemberDTO">
		select member_number,
		member_email, member_pw, member_name, member_nickname, member_phone,
		member_phone_input, member_gender, member_birth, member_terms
		from
		tbl_member
	</select>

	<update id="commentUpdate" parameterType="CommentDTO">
		update tbl_comment c
		set c.comment_content = #{commentContent}
		where c.comment_number =
		#{commentNumber}
	</update>

	<delete id="deleteByCommentNumber" parameterType="int">
		delete from
		tbl_comment
		where comment_number = #{commentNumber}
	</delete>

	<insert id="insertComment" parameterType="CommentDTO">
		insert into
		tbl_comment(comment_number, comment_content, comment_regist_date,
		comment_update_date, board_number, member_number)
		values(seq_comment.nextval, #{commentContent}, SYSDATE, SYSDATE,
		#{boardNumber}, #{memberNumber})
	</insert>


	<select id="checkRecommend" parameterType="RecommendDTO"
		resultType="RecommendDTO">
		select r.member_number, r.board_number
		from tbl_Recommend R
		join tbl_board b on b.board_number = r.board_number
		join tbl_member m
		on r.member_number = m.member_number
		where r.member_number =
		#{memberNumber}
	</select>
	<insert id="pickRecommend" parameterType="RecommendDTO">
		INSERT INTO
		TBL_RECOMMEND (BOARD_NUMBER, MEMBER_NUMBER)
		VALUES (#{boardNumber},
		#{memberNumber})
	</insert>
	<!-- 특정 게시글에 대한 사용자의 추천 여부 확인 -->
	<select id="hasAlreadyRecommended" parameterType="map"
		resultType="int">
		SELECT COUNT(*)
		FROM TBL_RECOMMEND
		WHERE BOARD_NUMBER =
		#{boardNumber} AND MEMBER_NUMBER = #{memberNumber}
	</select>
	<!-- 특정 게시글의 추천 수 조회 -->
	<select id="getRecommendCount" parameterType="int"
		resultType="int">
		SELECT COUNT(*)
		FROM TBL_RECOMMEND
		WHERE BOARD_NUMBER =
		#{boardNumber}
	</select>


</mapper>